version: '3.8'

services:
  # Database Services
  neo4j:
    image: neo4j:5-community
    container_name: ki-prod-neo4j
    restart: unless-stopped
    ports:
      - "${NEO4J_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/production_password_change_me}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_server_memory_pagecache_size=${NEO4J_PAGECACHE:-1G}
      - NEO4J_server_memory_heap_max__size=${NEO4J_HEAP:-1G}
      - NEO4J_server_jvm_additional=-XX:+UseG1GC
      - NEO4J_server_logs_gc_enabled=true
      - NEO4J_server_logs_gc_options="-XX:+PrintGCDetails -XX:+PrintGCTimeStamps"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./production/ssl:/var/lib/neo4j/certificates
    networks:
      - ki-production
    healthcheck:
      test: ["CMD", "cypher-shell", "--username", "neo4j", "--password", "${NEO4J_PASSWORD:-production_password_change_me}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  chromadb:
    image: ghcr.io/chroma-core/chroma:0.5.0
    container_name: ki-prod-chromadb
    restart: unless-stopped
    ports:
      - "${CHROMA_PORT:-8000}:8000"
    environment:
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/auth.txt
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider
    volumes:
      - chroma_data:/chroma/chroma
      - ./production/config/chroma-auth.txt:/chroma/auth.txt:ro
    networks:
      - ki-production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: ki-prod-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD:-production_redis_password}
    volumes:
      - redis_data:/data
      - ./production/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - ki-production
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-production_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Application Services
  backend:
    build: 
      context: ./neuronode-backend
      dockerfile: Dockerfile.production
    container_name: ki-prod-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    environment:
      - NODE_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-production_password_change_me}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-production_redis_password}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./production/data:/app/data
      - ./production/logs:/app/logs
      - ./production/config/.env:/app/.env:ro
    networks:
      - ki-production
    depends_on:
      neo4j:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  frontend:
    build:
      context: ./neuronode-backend-webapp  
      dockerfile: Dockerfile.production
    container_name: ki-prod-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      - NEXT_PUBLIC_APP_ENV=production
    networks:
      - ki-production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: ki-prod-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./production/config/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./production/ssl:/etc/nginx/ssl:ro
      - ./production/logs/nginx:/var/log/nginx
    networks:
      - ki-production
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring & Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: ki-prod-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./production/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ki-production

  grafana:
    image: grafana/grafana:latest
    container_name: ki-prod-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_change_me}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./production/config/grafana:/etc/grafana/provisioning
    networks:
      - ki-production
    depends_on:
      - prometheus

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: ki-prod-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./production/config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ki-production

  promtail:
    image: grafana/promtail:latest
    container_name: ki-prod-promtail
    restart: unless-stopped
    volumes:
      - ./production/config/promtail.yml:/etc/promtail/config.yml:ro
      - ./production/logs:/var/log/ki-system:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - ki-production
    depends_on:
      - loki

  # Backup Service
  backup:
    build:
      context: ./production/backup
      dockerfile: Dockerfile
    container_name: ki-prod-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./production/backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ki-production
    depends_on:
      - neo4j
      - chromadb
      - redis

networks:
  ki-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  chroma_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local 